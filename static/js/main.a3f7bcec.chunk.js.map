{"version":3,"sources":["redux/project/actions.js","redux/actions.js","redux/project/reducer.js","redux/reducers.js","redux/sagas.js","redux/store.js","serviceWorker.js","index.js"],"names":["toggleProjectPreviewModal","projectKey","type","TOGGLE_PROJECT_PREVIEW_MODAL","payload","__webpack_require__","d","__webpack_exports__","actions_toggleProjectPreviewModal","initialState","isOpen","projectReducer","state","arguments","length","undefined","action","Object","objectSpread","reducers","combineReducers","project","rootSaga","getState","regenerator_default","a","wrap","_context","prev","next","all","stop","_marked","sagaMiddleware","createSagaMiddleware","middlewares","Boolean","window","location","hostname","match","App","React","lazy","Promise","e","then","bind","ReactDOM","render","react_default","createElement","es","store","createStore","compose","applyMiddleware","apply","run","sagas","configureStore","react","fallback","className","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yFAIO,IAAMA,EAA4B,SAACC,GAAD,MAAiB,CACzDC,KAAMC,EACNC,QAAS,CAAEH,gBCNZI,EAAAC,EAAAC,EAAA,sBAAAJ,IAAAE,EAAAC,EAAAC,EAAA,sBAAAC,IACO,IAAML,EAA+B,2MCGtCM,EAAe,CACpBC,QAAQ,EACRT,WAAY,MAmBEU,EAhBe,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBJ,EAAcO,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC/D,OAAQC,EAAOd,MACd,KAAKC,IACJ,OAAOc,OAAAC,EAAA,EAAAD,CAAA,GACHL,EADJ,CAECX,WAAYW,EAAMF,OAAS,KAAOM,EAAOZ,QAAQH,WACjDS,QAASE,EAAMF,SAGjB,QACC,OAAOO,OAAAC,EAAA,EAAAD,CAAA,GACHL,KCbQO,EAJEC,YAAgB,CAC7BC,gDCFqBC,GAAV,SAAUA,EAASC,GAAnB,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACX,OADWF,EAAAE,KAAA,EACLC,YAAI,IADC,wBAAAH,EAAAI,SAAAC,GCGf,IAAMC,EAAiBC,cAEjBC,EAAc,CAACF,GCKDG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2ECTAC,EAAMC,IAAMC,KAAK,kBAAMC,QAAAd,IAAA,CAAAzB,EAAAwC,EAAA,IAAAxC,EAAAwC,EAAA,KAAAC,KAAAzC,EAAA0C,KAAA,aAE7BC,IAASC,OACRC,EAAAzB,EAAA0B,cAACC,EAAA,EAAD,CAAUC,MFHJ,SAAwB5C,GAE9B,IAAM4C,EAAQC,YACbnC,EACAV,EACA8C,YACCC,IAAeC,WAAf,EAAmBtB,KAcrB,OATAF,EAAeyB,IAAIC,GASZN,EEjBUO,IAChBV,EAAAzB,EAAA0B,cAACU,EAAA,SAAD,CAAUC,SAAUZ,EAAAzB,EAAA0B,cAAA,OAAKY,UAAU,aAClCb,EAAAzB,EAAA0B,cAACV,EAAD,QAGFuB,SAASC,eAAe,SD4GnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.a3f7bcec.chunk.js","sourcesContent":["import {\r\n\tTOGGLE_PROJECT_PREVIEW_MODAL,\r\n} from '../actions';\r\n\r\nexport const toggleProjectPreviewModal = (projectKey) => ({\r\n\ttype: TOGGLE_PROJECT_PREVIEW_MODAL,\r\n\tpayload: { projectKey }\r\n});","/* PROJECT */\r\nexport const TOGGLE_PROJECT_PREVIEW_MODAL = 'TOGGLE_PROJECT_PREVIEW_MODAL';\r\n\r\nexport * from './project/actions';","import {\r\n\tTOGGLE_PROJECT_PREVIEW_MODAL,\r\n} from '../actions';\r\n\r\nconst initialState = {\r\n\tisOpen: false,\r\n\tprojectKey: null,\r\n};\r\n\r\nexport const projectReducer = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase TOGGLE_PROJECT_PREVIEW_MODAL:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tprojectKey: state.isOpen ? null : action.payload.projectKey,\r\n\t\t\t\tisOpen: !state.isOpen,\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn {\r\n\t\t\t\t...state\r\n\t\t\t};\r\n\t}\r\n};\r\n\r\nexport default projectReducer;","import { combineReducers } from \"redux\";\r\nimport project from './project/reducer';\r\n\r\nconst reducers = combineReducers({\r\n    project\r\n});\r\n\r\nexport default reducers;","import { all } from \"redux-saga/effects\";\r\n\r\nexport default function* rootSaga(getState) {\r\n    yield all([]);\r\n}\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport reducers from \"./reducers\";\r\nimport sagas from \"./sagas\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middlewares = [sagaMiddleware];\r\n\r\nexport function configureStore(initialState) {\r\n\r\n\tconst store = createStore(\r\n\t\treducers,\r\n\t\tinitialState,\r\n\t\tcompose(\r\n\t\t\tapplyMiddleware(...middlewares)/*,\r\n\t\t\twindow.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n\t\t\twindow.__REDUX_DEVTOOLS_EXTENSION__()*/)\r\n\t);\r\n\r\n\tsagaMiddleware.run(sagas);\r\n\r\n\tif (module.hot) {\r\n\t\tmodule.hot.accept(\"./reducers\", () => {\r\n\t\t\tconst nextRootReducer = require(\"./reducers\");\r\n\t\t\tstore.replaceReducer(nextRootReducer);\r\n\t\t});\r\n\t}\t\r\n\r\n\treturn store;\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Suspense } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { configureStore } from \"./redux/store\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./assets/css/style.css\";\r\n\r\nconst App = React.lazy(() => import(\"./App\"));\r\n\r\nReactDOM.render(\r\n\t<Provider store={configureStore()}>\r\n\t\t<Suspense fallback={<div className=\"loading\" />}>\r\n\t\t\t<App />\r\n\t\t</Suspense>\r\n\t</Provider>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}